generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
}

enum STATUS_PRODUCT {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
  WAITING
  IN_PROGRESS
  FAILED
}

enum ROLES {
  ADMIN
  CLIENT
  SUPPLIER
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountId             String
  providerId            String
  userId                String    @map("user_id") @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)
  products    Product[]

  @@index([deletedAt])
  @@map("categories")
}

model Product {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String  @unique
  description String?

  status    STATUS_PRODUCT @default(PENDING)
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?      @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at") @db.Timestamp(6)

  categoryId String           @map("category_id") @db.Uuid
  category   Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants   ProductVariant[]

  @@index([deletedAt])
  @@map("products")
}

model ProductVariant {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  price       Int
  slug        String    @unique
  description String?
  imageUrl    String?   @map("image_url")
  color       String
  stock       Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)

  productId String  @map("category_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("product_variants")
}
